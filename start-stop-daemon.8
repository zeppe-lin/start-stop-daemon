.\" start-stop-daemon(8) manual page
.\" See COPYRIGHT file for copyright notices.
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <https://www.gnu.org/licenses/>.
.\"
.Dd September 6, 2023
.Dt START-STOP-DAEMON 8
.Os
.Sh NAME
.Nm start-stop-daemon
.Nd start and stop system daemon programs
.Sh SYNOPSIS
.Nm start-stop-daemon
.Op option ...
.Ar command
.Sh DESCRIPTION
The
.Nm
utility is used to control the creation and termination of
system-level processes.
Using one of the matching options,
.Nm
can be configured to find existing instances of a running process.
.Pp
.Sy Note :
Unless
.Fl \-pid
or
.Fl p Ns / Ns Fl \-pidfile
are specified,
.Nm
behaves similar to
.Xr killall 1 .
.Nm
will scan the process table looking for any processes which match the
process name, parent pid, uid, and/or gid (if specified).
Any matching process will prevent
.Fl S Ns / Ns Fl \-start
from starting the daemon.
All matching processes will be sent the TERM signal
.Po
or the one specified via
.Fl s Ns / Ns Fl \-signal
or
.Fl R Ns / Ns Fl \-retry
.Pc
if
.Fl K Ns / Ns Fl \-stop
is specified.
For daemons which have long-lived children which need to live through
a
.Fl K Ns / Ns Fl \-stop ,
you must specify a pidfile.
.Sh COMMANDS
.Bl -tag -width Ds
.It Fl S , Fl \-start Op -- Ar args ...
Check for the existence of a specified process.
If such a process exists,
.Nm
does nothing, and exits with error status 1
.Po
0 if
.Fl o Ns / Ns Fl \-oknodo
is specified
.Pc .
If such a process does not exist, it starts an instance, using either
the executable specified by
.Fl x Ns / Ns Fl \-exec
or, if specified, by
.Fl a Ns / Ns Fl \-startas .
Any
.Em args
given after
.Sy --
on the command line are passed unmodified to the program being
started.
.It Fl K , Fl \-stop
Checks for the existence of a specified process.
If such a process exists,
.Nm
sends it the signal specified by
.Fl s Ns / Ns Fl \-signal ,
and exits with error status 0. If such a process does not exist,
.Nm
exits with error status 1
.Po
0 if
.Fl o Ns / Ns Fl \-oknodo
is specified
.Pc .
If
.Fl R Ns / Ns Fl \-retry
is specified, then
.Nm
will check that the process(es) have terminated.
.It Fl T , Fl \-status
Check for the existence of a specified process, and returns an exit
status code, according to the LSB Init Script Actions.
.It Fl H , Fl \-help
Show usage information and exit.
.It Fl V , Fl \-version
Show the program version and exit.
.El
.Sh OPTIONS
.Ss Matching options
.Bl -tag -width Ds
.It Fl \-pid Ns = Ns Ar pid
Check for a process with the specified
.Ar pid .
The
.Ar pid
must be a number greater than 0.
.It Fl \-ppid Ns = Ns Ar ppid
Check for a process with the specified parent pid
.Ar ppid .
The
.Ar ppid
must be a number greater than 0.
.It Fl p Ar pidfile , Fl \-pidfile Ns = Ns Ar pidfile
Check whether a process has created the file
.Ar pidfile .
.Pp
.Sy Note :
Using this matching option alone might cause unintended processes to
be acted on, if the old process terminated without being able to
remove the
.Ar pidfile .
.Pp
.Sy Warning :
Using this match option with a world-writable pidfile or using it
alone with a daemon that writes the pidfile as an unprivileged
(non-root) user will be refused with an error as this is a security
risk, because either any user can write to it, or if the daemon gets
compromised, the contents of the pidfile cannot be trusted, and then a
privileged runner (such as an init script executed as root) would end
up acting on any system process.
Using
.Pa /dev/null
is exempt from these checks.
.It Fl x Ar executable , Fl \-exec Ns = Ns Ar executable
Check for processes that are instances of this
.Ar executable .
The
.Ar executable
argument should be an absolute pathname.
.Pp
.Sy Note :
This might not work as intended with interpreted scripts, as the
executable will point to the interpreter.
Take into account processes running from inside a chroot will also be
matched, so other match restrictions might be needed.
.It Fl n Ar process-name , Fl \-name Ns = Ns Ar process-name
Check for processes with the name
.Ar process-name .
The
.Ar process-name
is usually the process filename, but it could have been changed by the
process itself.
.Pp
.Sy Note :
On most systems this information is retrieved from the process comm
name from the kernel, which tends to have a relatively short length
limit (assuming more than 15 characters is non-portable).
.It Fl u Ar username Ns | Ns Ar uid , Fl \-user Ns = Ns Ar username Ns | Ns Ar uid
Check for processes owned by the user specified by
.Ar username
or
.Ar uid .
.Pp
.Sy Note :
Using this matching option alone will cause all processes matching the
user to be acted on.
.El
.Ss Generic options
.Bl -tag -width Ds
.It Fl g Ar group Ns | Ns Ar gid , Fl \-group Ns = Ns Ar group Ns | Ns Ar gid
Change to
.Ar group
or
.Ar gid
when starting the process.
.It Fl s Ar signal , Fl \-signal Ns = Ns Ar signal
With
.Fl K Ns / Ns Fl \-stop ,
specifies the signal to send to processes being stopped
.Pq default TERM .
.It Fl R Ar timeout Ns | Ns Ar schedule , Fl \-retry Ns = Ns Ar timeout Ns | Ns Ar schedule
With
.Fl K Ns / Ns Fl \-stop ,
specifies that
.Nm
is to check whether the process(es) do finish.
It will check repeatedly whether any matching processes are running,
until none are.
If the processes do not exit it will then take further action as
determined by the schedule.
.Pp
If
.Ar timeout
is specified instead of
.Ar schedule ,
then the schedule
.Ar signal Ns Sy / Ns Ar timeout Ns Sy /KILL/ Ns Ar timeout
is used, where
.Ar signal
is the signal specified with
.Fl s Ns / Ns Fl \-signal .
.Pp
.Ar schedule
is a list of at least two items separated by slashes
.Pf ( Sy / Ns );
each item may be
.Sy - Ns Em signal-number
or
.Pf [ \- ] Ns Ar signal-name ,
which means to send that signal, or
.Ar timeout ,
which means to wait that many seconds for processes to exit, or
.Sy forever ,
which means to repeat the rest of the schedule forever if necessary.
.Pp
If the end of the schedule is reached and
.Sy forever
is not specified, then
.Nm
exits with error status 2.
If a schedule is specified, then any signal specified with
.Fl s Ns / Ns Fl \-signal
is ignored.
.It Fl a Ar pathname , Fl \-startas Ns = Ns Ar pathname
With
.Fl S Ns / Ns Fl \-start ,
start the process specified by
.Ar pathname .
If not specified, defaults to the argument given to
.Fl x Ns / Ns Fl \-exec .
.It Fl t , Fl \-test
Print actions that would be taken and set appropriate return value,
but take no action.
.It Fl o , Fl \-oknodo
Return exit status 0 instead of 1 if no actions are (would be) taken.
.It Fl q , Fl \-quiet
Do not print informational messages; only display error messages.
.It Fl c Ar username Ns | Ns Ar uid Ns [ : Ns Ar group Ns | Ns Ar gid ] , Fl \-chuid Ns = Ns Ar username Ns | Ns Ar uid Ns [ : Ns Ar group Ns | Ns Ar gid ]
Change to this username/uid before starting the process.
You can also specify a group by appending a semicolon
.Ql \&: ,
then the group or gid in the same way as you would for the
.Xr chown 1
command
.Pf ( Ar user : Ns Ar group Ns ).
If a user is specified without a group, the primary GID for that user
is used.
When using this option you must realize that the primary and
supplemental groups are set as well, even if the
.Fl g Ns / Ns Fl \-group
option is not specified.
The
.Fl g Ns / Ns Fl \-group
option is only for groups that the user isn't normally a member of
.Po
like adding per process group membership for generic users like
.Sy nobody Ns
.Pc .
.It Fl e Ar var Ns [= Ns Ar value ] , Fl \-env Ns = Ns Ar var Ns [= Ns Ar value ]
Set the environment variable
.Ar var
to
.Ar value .
.Pp
.Sy Warning :
The GNU C library implementation provides a nonstandard extension.
If
.Fl e Ns / Ns Fl \-env
argument does not include an equal sign
.Po
e.g.,
.Dq --env VAR
.Pc
then the named variable is removed from the caller's environment.
See
.Xr putenv 3
for implementation details in your C standard library.
.It Fl r Ar root , Fl \-chroot Ns = Ns Ar root
Change directory and chroot to
.Ar root
before starting the process.
Please note that the pidfile is also written after the chroot.
.It Fl d Ar path , Fl \-chdir Ns = Ns Ar path
Change directory to
.Ar path
before starting the process.
This is done after the chroot if the
.Fl r Ns / Ns Fl \-chroot
option is set.
When not specified,
.Nm
will change directory to the root directory before starting the
process.
.It Fl b , Fl \-background
Typically used with programs that don't detach on their own.
This option will force
.Nm
to fork before starting the process, and force it into the background.
.Pp
.Sy Warning :
.Nm
cannot check the exit status if the process fails to execute for
.Sy any
reason.
This is a last resort, and is only meant for programs that either make
no sense forking on their own, or where it's not feasible to add the
code for them to do this themselves.
.It Fl C , Fl \-no-close
Do not close any file descriptor when forcing the daemon into the
background.
Used for debugging purposes to see the process output, or to redirect
file descriptors to log the process output.
Only relevant when using
.Fl b Ns / Ns Fl \-background .
.It Fl O Ar pathname , Fl \-output Ns = Ns Ar pathname
Redirect
.Sy stdout
and
.Sy stderr
to
.Ar pathname
when forcing the daemon into the background.
Only relevant when using
.Fl b Ns / Ns Fl \-background .
.It Fl N Ar int , Fl \-nicelevel Ns = Ns Ar int
This alters the priority of the process before starting it.
.It Fl P Ar policy : Ns Ar priority , Fl \-procsched Ns = Ns Ar policy : Ns Ar priority
This alters the process scheduler policy and priority of the process
before starting it.
The priority can be optionally specified by appending a semicolon
.Ql \&:
followed by the value.
The default
.Ar priority
is 0.
The currently supported policy values are
.Sy other ,
.Sy fifo
and
.Sy rr .
.It Fl I Ar class : Ns Ar priority , Fl \-iosched Ns = Ns Ar class : Ns Ar priority
This alters the IO scheduler class and priority of the process before
starting it.
The priority can be optionally specified by appending a semicolon
.Ql \&:
followed by the value.
The default
.Em priority
is 4, unless
.Em class
is
.Sy idle ,
then
.Em priority
will always be 7. The currently supported values for
.Em class
are
.Sy idle ,
.Sy best-effort
and
.Sy real-time .
.It Fl k Ar mask , Fl \-umask Ns = Ns Ar mask
This sets the umask of the process before starting it.
.It Fl m , Fl \-make-pidfile
Used when starting a program that does not create its own pid file.
This option will make
.Nm
create the file referenced with
.Fl p Ns / Ns Fl \-pidfile
and place the pid into it just before executing the process.
Note, the file will only be removed when stopping the program if
.Fl \-remove-pidfile
is used.
.Pp
.Sy Note :
This feature may not work in all cases.
Most notably when the program being executed forks from its main
process.
Because of this, it is usually only useful when combined with the
.Fl b Ns / Ns Fl \-background
option.
.It Fl \-remove-pidfile
Used when stopping a program that does not remove its own pid file.
This option will make
.Nm
remove the file referenced with
.Fl p Ns / Ns Fl \-pidfile
after terminating the process.
.It Fl v , Fl \-verbose
Print verbose informational messages.
.El
.Sh EXIT STATUS
.Bl -tag -width Ds
.It 0
The requested action was performed.
If
.Fl o Ns / Ns Fl \-oknodo
was specified, it's also possible that nothing had to be done.
This can happen when
.Fl S Ns / Ns Fl \-start
was specified and a matching process was already running, or when
.Fl K Ns / Ns Fl \-stop
was specified and there were no matching processes.
.It 1
If
.Fl o Ns / Ns Fl \-oknodo
was not specified and nothing was done.
.It 2
If
.Fl K Ns / Ns Fl \-stop
and
.Fl R Ns / Ns Fl \-retry
were specified, but the end of the schedule was reached and the
processes were still running.
.It 3
Any other error.
.El
.Pp
When using the
.Fl T Ns / Ns Fl \-status
command, the following status codes are returned:
.Bl -tag -width Ds
.It 0
Program is running.
.It 1
Program is not running and the pid file exists.
.It 3
Program is not running.
.It 4
Unable to determine program status.
.El
.Sh EXAMPLES
.Bl -bullet
.It
Start the
.Sy foo
daemon, unless one is already running (a process named
.Dq foo ,
running as user
.Dq foo ,
with pid in
.Pa foo.pid Ns ):
.Bd -literal -offset indent
start-stop-daemon               \e
        --start                 \e
        --oknodo                \e
        --user=foo              \e
        --name=foo              \e
        --pidfile=/run/foo.pid  \e
        --startas=/usr/sbin/foo \e
        --chuid=foo             \e
        -- --daemon
.Ed
.It
Send
.Sy SIGTERM
to
.Sy foo
and wait up to 5 seconds for it to stop:
.Bd -literal -offset indent
start-stop-daemon               \e
        --stop                  \e
        --oknodo                \e
        --user=foo              \e
        --name=foo              \e
        --pidfile=/run/foo.pid  \e
        --retry=5
.Ed
.It
Demonstration of a custom schedule for stopping
.Sy foo :
.Bd -literal -offset indent
start-stop-daemon               \e
        --stop                  \e
        --oknodo                \e
        --user=foo              \e
        --name=foo              \e
        --pidfile=/run/foo.pid  \e
        --retry=TERM/30/KILL/5
.Ed
.El
.\" vim: cc=72 tw=70
.\" End of file.
